program backend;

{$APPTYPE CONSOLE}

{$R *.res}

uses Horse, Horse.Jhonson,Horse.Compression, Horse.Commons, Horse.BasicAuthentication,System.SysUtils, System.JSON;

var
   Users: TJSONArray;

begin
  THorse.Use(Compression());
  THorse.Use(Jhonson());

   {BASE AUTH}
   THorse.Use(HorseBasicAuthentication(
   function(const AUsername, APassword: string): Boolean
   begin
        // Here inside you can access your database and validate if username and password are valid
        Result := AUsername.Equals('user') and APassword.Equals('password');
   end));

  Users := TJSONArray.Create;

  try
    {COMPRESSION}
    THorse.Get('/ping',
    procedure(Req: THorseRequest; Res: THorseResponse; Next: TProc)
    var
      I: Integer;
      LPong: TJSONArray;
    begin
      LPong := TJSONArray.Create;
      for I := 0 to 1000 do
        LPong.Add(TJSONObject.Create(TJSONPair.Create('ping', 'pong')));
      Res.Send(LPong);
    end);

    THorse.Get('/users',
    procedure(Req: THorseRequest; Res: THorseResponse; Next: TProc)
    begin
         Res.Send<TJSONAncestor>(Users.Clone);
    end);

    THorse.Post('/users',
    procedure(Req: THorseRequest; Res: THorseResponse; Next: TProc)
    var
      User: TJSONObject;
    begin
          User := Req.Body<TJSONObject>.Clone as TJSONObject;
          Users.AddElement(User);
          Res.Send<TJSONAncestor>(User.Clone).Status(THTTPStatus.Created);
    end);

    THorse.Delete('/users/:id',
    procedure(Req: THorseRequest; Res: THorseResponse; Next: TProc)
    var
      id : Integer;
    begin
          id := Req.Params.Items['id'].ToInteger;
          Users.Remove(Pred(id)).Free;
          Res.Send<TJSONAncestor>(Users.Clone).Status(THTTPStatus.NoContent);
    end);

    THorse.Listen(9000);
  finally
    FreeAndNil(Users);
  end;

end.
